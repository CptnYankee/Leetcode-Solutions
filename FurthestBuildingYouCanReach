/*
ou are given an integer array heights representing the heights of buildings, some bricks, and some ladders.

You start your journey from building 0 and move to the next building by possibly using bricks or ladders.

While moving from building i to building i+1 (0-indexed),

If the current building's height is greater than or equal to the next building's height, you do not need a ladder or bricks.
If the current building's height is less than the next building's height, you can either use one ladder or (h[i+1] - h[i]) bricks.
Return the furthest building index (0-indexed) you can reach if you use the given ladders and bricks optimally.
*/

class Solution {
    public int furthestBuilding(int[] heights, int bricks, int ladders) {
        
        int furthest = 0;
        PriorityQueue<Integer> pq = new PriorityQueue<Integer>(Collections.reverseOrder());
        //if we track the largest differentials, we will better know when to use ladders.
        
        //How do we decide when to use ladders? we'd want to save them for the largest differentials.
        for(int i = 0; i < heights.length-1; i++){
            furthest = i;
            int diff = Math.max((heights[i+1] - heights[i]), 0);
            if(diff > 0)
                pq.add(diff);
            else
                continue;
            
            bricks -= diff;
            if(bricks < 0){
                bricks += pq.poll(); //retrieve the bricks we've already used on the largest past differential
                ladders--; //We're using a ladder instead.
                
                if(ladders < 0) //If ladders is -1 here, we've actually gone as far as we can.
                    return furthest;
            }
            
        }
        
        
        return heights.length-1;
    }
}
